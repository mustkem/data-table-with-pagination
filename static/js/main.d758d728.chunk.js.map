{"version":3,"sources":["logo.svg","AppStore/actionTypes.js","AppStore/myReducer.js","AppStore/rootReducer.js","AppStore/store.js","AppStore/actions.js","Components/tableItem.js","appConfig.js","Shared/Pagination.js","Components/TableView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","actionTypes","GET_TABLE_LIST","SET_PAGINATION","initialState","userList","page","rootReducer","combineReducers","tableListReducer","state","action","type","payload","console","log","appStore","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","getList","dispatch","getState","axios","get","then","response","data","catch","error","paginationFunc","query","tableItem","props","className","this","item","first_name","last_name","company_name","city","zip","email","web","age","Component","recordsPerPagePagination","Pagination","pageClick","pageNumber","current","parse","location","search","history","push","stringify","end","currentPage","parseInt","totalPages","length","perPage","nextRemainingPagesToShow","start","tempArr","halfOfTotalButtons","numberOfPaginationButtons","i","key","onClick","disabled","withRouter","connect","path","TableView","getUsers","sortBy","sortAsy","sort","filteredUserList","slice","onSort","arr","b_greater_a","a_greater_b","a","b","onClickSort","updatedSort","Object","keys","forEach","ky","setState","default","e","map","index","id","App","store","src","logo","alt","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d758d728.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const actionTypes = {\r\n    GET_TABLE_LIST: 'GET_TABLE_LIST',\r\n    SET_PAGINATION: 'SET_PAGINATION'\r\n};","import { actionTypes } from './actionTypes';\r\n\r\nconst initialState = {\r\n    userList:[],\r\n    page:1\r\n};\r\n\r\nexport default function myReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case actionTypes.GET_TABLE_LIST:\r\n        return {\r\n            ...state,\r\n            userList:action.payload\r\n        };\r\n        case actionTypes.SET_PAGINATION:\r\n            console.log(\"test\",action.payload)\r\n        return {\r\n            ...state,\r\n            ...action.payload\r\n        };\r\n        \r\n\r\n        default:\r\n            return {...state}\r\n        }\r\n    }","import { combineReducers } from 'redux';\r\nimport myReducer from './myReducer';\r\nconst rootReducer = combineReducers({\r\n    tableListReducer: myReducer\r\n})\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const appStore = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.devToolsExtension ? window.devToolsExtension() : f => f\r\n      )\r\n)","import { actionTypes } from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport function getList() {\r\n    return (dispatch, getState) => {\r\n        axios.get('https://demo9197058.mockable.io/users')\r\n            .then(function (response) {\r\n                dispatch(setList(response.data));\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    };\r\n}\r\n\r\nfunction setList(payload) {\r\n    return {\r\n        type: actionTypes.GET_TABLE_LIST,\r\n        payload: payload\r\n    };\r\n}\r\n\r\n\r\nexport function paginationFunc(query) {\r\n    return {\r\n        type: actionTypes.SET_PAGINATION,\r\n        payload: query\r\n    };\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass tableItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <li className=\"list-item clearfix\">\r\n                <div className=\"data-item first-name\">\r\n                    {\r\n                        this.props.item.first_name\r\n                    }\r\n                </div>\r\n                <div className=\"data-item last-name\">\r\n                    {\r\n                        this.props.item.last_name\r\n                    }\r\n                </div>\r\n                <div className=\"data-item company-name\">\r\n                    {\r\n                        this.props.item.company_name\r\n                    }\r\n                </div>\r\n                <div className=\"data-item city\">\r\n                    {\r\n                        this.props.item.city\r\n                    }\r\n                </div>\r\n                <div className=\"data-item state\">\r\n                    {\r\n                        this.props.item.state\r\n                    }\r\n                </div>\r\n                <div className=\"data-item zip\">\r\n                    {\r\n                        this.props.item.zip\r\n                    }\r\n                </div>\r\n                <div className=\"data-item email\">\r\n                    {\r\n                        this.props.item.email\r\n                    }\r\n                </div>\r\n                <div className=\"data-item web\">\r\n                    {\r\n                        this.props.item.web\r\n                    }\r\n                </div>\r\n                <div className=\"data-item age\">\r\n                    {\r\n                        this.props.item.age\r\n                    }\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default tableItem;","export const recordsPerPagePagination = 5;\r\nexport const numberOfPaginationButtons = 9;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { recordsPerPagePagination as perPage, numberOfPaginationButtons } from \"../appConfig\";\r\nimport { path } from 'ramda';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { parse, stringify } from 'query-string';\r\nimport { paginationFunc } from \"../AppStore/actions\";\r\n\r\n\r\nclass Pagination extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    pageClick = (pageNumber, current) => {\r\n        if (!current) {\r\n            const query = parse(this.props.location.search);\r\n            query.page = pageNumber;\r\n            this.props.history.push('/?' + stringify(query))\r\n            this.props.paginationFunc(query);\r\n            // window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const currentPage = parseInt(this.props.page);\r\n        const totalRecords = this.props.userList.length;\r\n        const totalPages = totalRecords / perPage;\r\n        const totalButtons = this.props.page + numberOfPaginationButtons - 1;\r\n        const nextRemainingPagesToShow = totalPages - currentPage;\r\n        const beforeRemainingPagesToShow = currentPage - 1;\r\n        // console.log(nextRemainingPagesToShow);\r\n\r\n        let start = this.props.page;\r\n        let end;\r\n        const tempArr = [];\r\n        const halfOfTotalButtons = parseInt(numberOfPaginationButtons / 2);\r\n\r\n        // console.log(halfOfTotalButtons)\r\n\r\n        if (currentPage <= halfOfTotalButtons) {\r\n            start = 1;\r\n            end = numberOfPaginationButtons\r\n        }\r\n\r\n        if (currentPage > halfOfTotalButtons) {\r\n            start = currentPage - halfOfTotalButtons;\r\n            end = currentPage + (halfOfTotalButtons > nextRemainingPagesToShow ? nextRemainingPagesToShow : halfOfTotalButtons);\r\n        }\r\n\r\n\r\n        for (let i = start; i <= end; i++) {\r\n            tempArr.push(<li key={i} >\r\n                <button onClick={() => this.pageClick(i, currentPage === i)} className={(currentPage === i) ? \"active\" : \"\"}>{i}</button>\r\n            </li>);\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"pagination\">\r\n                <div className=\"prev-next\">\r\n                    <button\r\n                        disabled={`${this.props.page <= 1 ? \"disabled\" : \"\"}`}\r\n                        className={`button ${this.props.page <= 1 ? \"disable\" : \"\"}`}\r\n                        onClick={() => this.pageClick(this.props.page - 1, false)}>\r\n                        Previous\r\n                    </button>\r\n                    <button\r\n                        disabled={`${this.props.page >= totalPages ? \"disabled\" : \"\"}`}\r\n                        className={`button ${this.props.page >= totalPages ? \"disable\" : \"\"}`}\r\n                        onClick={() => this.pageClick(this.props.page + 1, false)}>\r\n                        Next\r\n                </button>\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <button\r\n                            disabled={`${this.props.page <= halfOfTotalButtons ? \"disabled\" : \"\"}`}\r\n                            className={`button ${this.props.page <= halfOfTotalButtons ? \"disable\" : \"\"}`}\r\n                            onClick={() => this.pageClick(this.props.page - halfOfTotalButtons, false)}>\r\n                            {\r\n                                `<<`\r\n                            }\r\n                        </button>\r\n\r\n                    </li>\r\n                    {\r\n                        tempArr\r\n                    }\r\n                    <li>\r\n                        <button\r\n                            disabled={`${this.props.page > nextRemainingPagesToShow + 2 ? \"disabled\" : \"\"}`}\r\n                            className={`button ${this.props.page > nextRemainingPagesToShow + 2 ? \"disable\" : \"\"}`}\r\n                            onClick={() => this.pageClick(this.props.page + halfOfTotalButtons, false)}>\r\n                            {\r\n                                `>>`\r\n                            }\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userList: path([\"tableListReducer\", \"userList\"], state) ? path([\"tableListReducer\", \"userList\"], state) : [],\r\n        page: parseInt(path([\"tableListReducer\", \"page\"], state))\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        paginationFunc: (query) => dispatch(paginationFunc(query)),\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Pagination));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { path } from 'ramda';\r\nimport { parse } from 'query-string';\r\n\r\n\r\nimport { getList, paginationFunc } from '../AppStore/actions';\r\nimport TableItem from './tableItem';\r\nimport { recordsPerPagePagination as perPage } from \"../appConfig\";\r\nimport Pagination from '../Shared/Pagination';\r\n\r\nclass TableView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sort: {\r\n                default: false,\r\n                first_name: false,\r\n                last_name: false,\r\n                company_name: false,\r\n                city: false,\r\n                state: false,\r\n                zip: false,\r\n                email: false,\r\n                web: false,\r\n                age: false\r\n            },\r\n            sortBy: 'default',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getList();\r\n        const query = parse(this.props.location.search);\r\n        this.props.paginationFunc(query);\r\n    }\r\n\r\n    getUsers = () => {\r\n        const sortBy = this.state.sortBy;\r\n        const sortAsy = this.state.sort[sortBy];\r\n        const start = perPage * (this.props.page - 1)\r\n        const end = start + perPage;\r\n        let userList = [...this.props.userList];\r\n        const filteredUserList = userList.slice(start, end);\r\n        const sortedArray = this.onSort(filteredUserList, sortBy, sortAsy);\r\n        return sortedArray;\r\n    }\r\n\r\n    onSort = (arr, sortBy, sortAsy) => {\r\n\r\n        let b_greater_a = -1;\r\n        let a_greater_b = 1;\r\n        if (!sortAsy) {\r\n            b_greater_a = 1;\r\n            a_greater_b = -1;\r\n        }\r\n\r\n        function compare(a, b) {\r\n            if (a[sortBy] < b[sortBy]) {\r\n                return b_greater_a;\r\n            }\r\n            if (a[sortBy] > b[sortBy]) {\r\n                return a_greater_b;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        arr.sort(compare);\r\n        return arr;\r\n    }\r\n\r\n    onClickSort = (key) => {\r\n        let updatedSort = {};\r\n        let sort = { ...this.state.sort }\r\n        Object.keys(sort).forEach(ky => {\r\n            let item = sort[key];\r\n            if (key == ky) {\r\n                item = !item\r\n            } else {\r\n                item = false;\r\n            }\r\n            updatedSort[ky] = item;\r\n        })\r\n        this.setState({\r\n            sort: updatedSort,\r\n            sortBy: key\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"table-view\">\r\n                    <ul className=\"table\">\r\n                        <li className=\"list-item head clearfix\">\r\n                            <div onClick={(e) => { this.onClickSort('first_name') }} className=\"data-item first-name\">\r\n                                First Name\r\n                                <i className={`${this.state.sort.first_name ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('last_name') }} className=\"data-item last-name\">\r\n                                Last Name\r\n                                <i className={`${this.state.sort.last_name ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('company_name') }} className=\"data-item company-name\">\r\n                                Company Name\r\n                                <i className={`${this.state.sort.company_name ? 'active' : ''}`} >^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('city') }} className=\"data-item city\">\r\n                                City\r\n                                <i className={`${this.state.sort.city ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('state') }} className=\"data-item state\">\r\n                                State\r\n                                <i className={`${this.state.sort.state ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('zip') }} className=\"data-item zip\">\r\n                                Zip\r\n                                <i className={`${this.state.sort.zip ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('email') }} className=\"data-item email\">\r\n                                Email\r\n                                <i className={`${this.state.sort.email ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('web') }} className=\"data-item web\">\r\n                                Web\r\n                                <i className={`${this.state.sort.web ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                            <div onClick={(e) => { this.onClickSort('age') }} className=\"data-item age\">\r\n                                Age\r\n                                <i className={`${this.state.sort.age ? 'active' : ''}`}>^</i>\r\n                            </div>\r\n                        </li>\r\n                        {\r\n                            this.getUsers().map((item, index) => <TableItem\r\n                                key={item.id}\r\n                                item={item}\r\n                                index={index}\r\n                            />)\r\n                        }\r\n                    </ul>\r\n                    <Pagination />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userList: path([\"tableListReducer\", \"userList\"], state) ? path([\"tableListReducer\", \"userList\"], state) : [],\r\n        page: path([\"tableListReducer\", \"page\"], state)\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getList: () => dispatch(getList()),\r\n        paginationFunc: (query) => dispatch(paginationFunc(query)),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableView);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { appStore } from './AppStore/store';\nimport { Provider } from 'react-redux';\nimport TableView from './Components/TableView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={appStore}>\n        <Router>\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Data Table\n          </p>\n          </header>\n          <div className=\"content\">\n            <Switch>\n              <Route path=\"/\" exact component={TableView} />\n              <Route path=\"/user/:id\" component={() => (<div>user</div>)} />\n            </Switch>\n\n          </div>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}